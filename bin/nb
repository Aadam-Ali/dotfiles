#!/usr/bin/env bash

config_dir="${HOME}/.config/nb"
active_file="${config_dir}/active"

[[ -z "${NOTES}" ]] && NOTES="${HOME}/Notes"
[[ -z "${EDITOR}" ]] && EDITOR="vi"

if [[ ! -d "${config_dir}" ]]; then
  mkdir -p "${config_dir}"
fi

if [[ -f "${active_file}" && -s "${active_file}" ]]; then
  active_nb_name="$(< "${active_file}")"
  if [[ ! -d "${NOTES}/${active_nb_name}" ]]; then
    active_nb_name="default"
  fi
else
  active_nb_name="default"
  echo "${active_nb_name}" > "${active_file}"
  mkdir -p "${NOTES}/${active_nb_name}"
fi

active_nb="${NOTES}/${active_nb_name}"
cd "${NOTES}"

help () {
  echo "Usage: nb <subcommand>"
  echo
  echo "  help     Print this help"
  echo "  current  Print the current notebook"
  echo "  edit     Edit a note"
  echo "  gen      Generates READMEs for GitHub navigation"
  echo "  link     Link a note to another"
  echo "  new      Create a new item of the specified type"
  echo "  read     Read note"
  echo "  select   Select a workspace"
}

command_not_found () {
  echo "nb: unexpected command '$1'"
  echo "Try 'nb help' for more information"
  exit 1
}

new_book () {
  [[ "$1" == "" ]] && echo "Usage: nb new book <name>" && exit 1

  mkdir "${NOTES}/$1"
  echo "$1" > "${active_file}"
}

select_nb () {
  nb="$(for nb in $(ls -d */); do echo ${nb%%/}; done | fzy)"
  echo "${nb}" > "${active_file}"
}

new_note () {
  datetime="$(date +%Y%m%d%H%M%S)"

  mkdir -p "${active_nb}/${datetime}"
  file="${active_nb}/${datetime}/README.md"

  echo "# $@" > "${file}"
  ${EDITOR} ${file}
}

list_notes () {
  cd "${NOTES}"
  grep --max-count=1 -H "# " **/**/*.md |
  sed -e "s/\/README.md:#/:/g"
}

select_note () {
  list_notes | fzy
}

list_notes_for_nb () {
  cd "${active_nb}"
  grep --max-count=1 -H "# " **/*.md |
  sed -e "s/\/README.md:#/:/g"
}

edit_note () {
  ${EDITOR} "$(select_note | awk -F ": " '{print $1"/README.md"}')"
}

read_note () {
  less -i "$(select_note | awk -F ": " '{print $1"/README.md"}')"
}

select_note () {
  list_notes | fzy
}

link_note () {
  select_note | awk -F ": " '{print "* ["$1"](/"$1"/) "$2}'
}

search_notes () {
  notes=$(grep -Rwi --include README.md "$@" **/**/* | sed -e 's/  //g' -e "s/\/README.md:/: /g")
  [[ -z "${notes}" ]] && exit 0
  less -i $( echo "${notes}" | fzy | awk -F ": " '{print $1"/README.md"}')
}

generate_readme_files () {
  nb_notes="$(list_notes_for_nb)"
  > "${NOTES}/README.md"
  echo "# Notes" >> "${NOTES}/README.md"
  echo >> "${NOTES}/README.md"

  for nb in $(cd "${NOTES}"; ls -d */); do
    cd "${NOTES}/${nb}"

    echo "* [${nb%%/}](/${nb})" >> "${NOTES}/README.md"

    > "README.md"
    echo "# ${active_nb_name}" > "README.md"
    echo >> "README.md"
    for note in "${nb_notes}"; do
      echo "$(echo "${note}" |
      awk -F ": " '{print "* ["$1"](//"$1"/) "$2}'|
      sed "s/(\//(\/${active_nb_name}/g")" >> "README.md"
    done
  done
}

new () {
  case "$1" in
    "n" | "note")
      shift
      new_note "$@"
      ;;
    "b" | "book")
      shift
      new_book "$@"
      ;;
    *)
      command_not_found "$@"
      ;;
  esac
}

case "$1" in
  "" | "h" | "help")
    help
    ;;
  "c" | "current")
    echo "${active_nb_name}"
    ;;
  "e" | "edit")
    edit_note
    ;;
  "g" | "generate-readme-files")
    generate_readme_files
    ;;
  "l" | "link")
    link_note
    ;;
  "n" | "new")
    shift
    new "$@"
    ;;
  "r" | "read")
    read_note
    ;;
  "q" | "search")
    shift
    search_notes "$@"
    ;;
  "s" | "select")
    select_nb
    ;;
  "sn")
    select_note
    ;;
  *)
    command_not_found "$@"
    ;;
esac
